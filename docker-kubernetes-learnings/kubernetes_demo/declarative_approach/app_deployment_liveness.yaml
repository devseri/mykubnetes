# what service should have - the deployment which it want to expose, the port of pod and  port at which
# application is running
# pl refer https://kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/

apiVersion: v1
# k8 artifacts
kind: Service
# its own name
metadata:
  name: backend
# deployment specs
spec:
  # select pods with lable app: second-app (pods may have multiple labels)
  # the pods in our case is having second label tier: backend
  # the pods can also be placed say with label tier: another-backend
  # so selecting just app: second-app is targetting all the tiers in which this app can be placed
  selector:
    app: second-app
  # ports specs
  ports:
  # IP protocol
  - protocol: "TCP"
    # port that will be exposed by this service
    port: 80
    # port number to access on the pods targeted by the service (mapped to application)
    targetPort: 3000
    # to allow traffic inside kinD cluster
    nodePort: 30010
  # type of service
  type: NodePort
---
# The deployment object first should have its own name , then the container and pod containing that container
# and then selecting this pod as a part of deployment

# refer https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/
# will list all details of enclosing specs
apiVersion: apps/v1
# Deployment is k8 artifact or k8 object
kind: Deployment
metadata:
  # name of deployment
  name: second-app-deployment
# deployment specs, how the deployment should be configured
spec:
  # how many pods, default is 1, even 0 can be given
  replicas: 2
  # pods specs, which deployment should have
  template:
    # pods should be labelled with
    # there is no need for kind: Pod  here as deployment will always have pod
    metadata:
      # pod should be labelled with
      labels:
        app: second-app
        tier: backend
    # how this pod should look like
    spec:
      # how containers should be created inside pods
      # for this deployment, how many replicas you create , all pods will have same container spec
      containers:
      # container name inside pod and image
      - name: second-app-container
        # you need to create this image and push to registry
        image: cbagade/kubd-first-app:v5
        imagePullPolicy: Always
        # k8 uses liveness probes to know when to restart a container.
        # For example, liveness probes could catch a deadlock, where an application is running,
        # but unable to make progress.
        # Restarting a container in such a state can help to make the application more available despite bugs
        livenessProbe:
          # will try to make a get request at path / on port 3000 in a interval of 10 seconds
          # after 5 seconds, while container become stable (up/running)
          httpGet:
            path: /
            port: 3000
          periodSeconds: 10
          initialDelaySeconds: 5
  # what pods should be created as a part of deployment
  # see template section, where pods are labelled
  # those pods will be selected to form this deployment
  selector:
    # the labels will be matched based on labels of pods
    matchLabels:
      app: second-app
      tier: backend


# kubectl apply -f app_deployment_liveness.yaml
# curl http://localhost:30010/error
#(((( can also be accessed by node ip
# kubectl get nodes -o wide
# curl http://<worker_node_ip>:30010 )))))
# then observe pod coming in running state and also observe restart count
# hit curl error request multiple times
# kubectl delete -f app_deployment_liveness.yaml


